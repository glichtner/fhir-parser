{% import 'macros.jinja2' as custom_mac -%}
# -*- coding: utf-8 -*-
"""
Profile: {{ profile.url }}
Release: {{ release_name }}
Version: {{ profile.fhir_version }}
{%- if info.build %}
Build ID: {{ info.build }}
{%- elif info.revision %}
Revision: {{ info.revision }}
{%- endif %}
Last updated: {{ profile.fhir_last_updated }}
"""
{%- if need_typing %}
import typing
{%- endif %}
from pydantic import Field
{%- if need_root_validator %}
from pydantic import root_validator
{% endif %}
{%- if has_required_primitive_element %}
from pydantic.error_wrappers import ErrorWrapper, ValidationError
from pydantic.errors import MissingError, NoneIsNotAllowedError
{% endif %}
{%- if need_fhirtypes %}
from . import fhirtypes
{% endif %}
{%- set imported = {} %}
{%- for klass in classes %}

{% if klass.superclass in imports and klass.superclass.module not in imported -%}
from . import {{ klass.superclass.module }}
{% set _ = imported.update({klass.superclass.module: True}) %}
{% endif -%}

class {{ klass.name }}({% if klass.superclass in imports %}{{ klass.superclass.module }}.{% endif -%}
    {{ klass.superclass.name|default('object')}}):
    """Disclaimer: Any field name ends with ``__ext`` doesn't part of
    Resource StructureDefinition, instead used to enable Extensibility feature
    for FHIR Primitive Data Types.

    {{ klass.short|wordwrap(width=75, wrapstring="\n    ") }}.
{%- if klass.formal %}
    {{ klass.formal|wordwrap(width=75, wrapstring="\n    ") }}
{%- endif %}
    """
{%- if klass.resource_type %}
    resource_type = Field("{{ klass.resource_type }}", const=True)
{%- endif %}
{%- for prop in klass.properties %}
	{% set type_klass_ %}
		{%- if prop.field_type_module %}{{ prop.field_type_module }}.{{ prop.field_type }}{% else %}{{ prop.field_type }}{% endif -%}
	{%endset -%}
	{%- set type_klass %}
		{%- if prop.is_array %}typing.List[{{ type_klass_ }}]{% else %}{{ type_klass_ }}{% endif -%}
	{% endset %}
    {{ prop.name }}: {{ type_klass }} = Field(
		{% if prop.nonoptional and not prop.one_of_many and not prop.need_primitive_ext %}...{% else %}None{% endif %},
		alias="{{ prop.orig_name }}",
		title={% if prop.short%}{{ custom_mac.pep8_string_wrap(prop.short, width=70).rstrip()}}{% else %}None{% endif %},
		description={% if prop.formal%}{{ custom_mac.pep8_string_wrap(prop.formal, width=70).rstrip()}}{% else %}None{% endif %},
        # if property is element of this resource.
        element_property=True,
        {%- if prop.nonoptional and not prop.one_of_many and prop.need_primitive_ext %}
        element_required=True,
        {%- endif %}
        {%- if prop.one_of_many%}
        # Choice of Data Types. i.e {{ prop.one_of_many }}[x]
		one_of_many="{{ prop.one_of_many }}",
		one_of_many_required={% if prop.nonoptional %}True{% else %}False{% endif %},
        {%- endif %}
        {%- if prop.enum|length > 0 %}
        # note: Enum values can be used in validation,
        # but use in your own responsibilities, read official FHIR documentation.
		enum_values={{ prop.enum|tojson }},
        {%- endif %}
        {%- if prop.reference_to_names|length > 0 %}
        # note: Listed Resource Type(s) should be allowed as Reference.
		enum_reference_types={{ prop.reference_to_names|tojson }},
        {%- endif %}
	)
    {%- if prop.need_primitive_ext and klass.name != "Extension" %}
    {{ prop.orig_name }}__ext: {% if prop.is_array %}typing.List[typing.Union[fhirtypes.FHIRPrimitiveExtensionType, None]]{% else %}fhirtypes.FHIRPrimitiveExtensionType{% endif %} = Field(
        None,
        alias="_{{ prop.orig_name }}",
        title="Extension field for ``{{ prop.name }}``."
    )
    {%- endif %}

{%- endfor %}
    @classmethod
    def elements_sequence(cls):
        """returning all elements names from ``{{ klass.name }}`` according specification,
        with preserving original sequence order.
        """
        return {{ klass.expanded_properties_sequence|tojson }}

{% if klass.name in required_primitive_element_fields %}
    @root_validator(pre=True, allow_reuse=True)
    def {{ 'validate_required_primitive_elements'|unique_func_name(klass.name) }}(
        cls, values: typing.Dict[str, typing.Any]
    ) -> typing.Dict[str, typing.Any]:
        """https://www.hl7.org/fhir/extensibility.html#Special-Case
        In some cases, implementers might find that they do not have appropriate data for
        an element with minimum cardinality = 1. In this case, the element must be present,
        but unless the resource or a profile on it has made the actual value of the primitive
        data type mandatory, it is possible to provide an extension that explains why
        the primitive value is not present.
        """
        required_fields = [
            {%- for field, ext_field in required_primitive_element_fields[klass.name] %}
			("{{ field }}", "{{ ext_field }}"){% if not loop.last -%},{% endif -%}
	        {% endfor -%}
        ]
        _missing = object()

        def _fallback():
            return ""

        errors: typing.List["ErrorWrapper"] = []
        for name, ext in required_fields:
            field = cls.__fields__[name]
            ext_field = cls.__fields__[ext]
            value = values.get(field.alias, _missing)
            if value not in (_missing, None):
                continue
            ext_value = values.get(ext_field.alias, _missing)
            missing_ext = True
            if ext_value not in (_missing, None):
                if isinstance(ext_value, dict):
                    missing_ext = len(ext_value.get("extension", [])) == 0
                elif (
                    getattr(ext_value.__class__, "get_resource_type", _fallback)()
                    == "FHIRPrimitiveExtension"
                ):
                    if ext_value.extension and len(ext_value.extension) > 0:
                        missing_ext = False
                else:
                    validate_pass = True
                    for validator in ext_field.type_.__get_validators__():
                        try:
                            ext_value = validator(v=ext_value)
                        except ValidationError as exc:
                            errors.append(ErrorWrapper(exc, loc=ext_field.alias))
                            validate_pass = False
                    if not validate_pass:
                        continue
                    if ext_value.extension and len(ext_value.extension) > 0:
                        missing_ext = False
            if missing_ext:
                if value is _missing:
                    errors.append(ErrorWrapper(MissingError(), loc=field.alias))
                else:
                    errors.append(
                        ErrorWrapper(NoneIsNotAllowedError(), loc=field.alias)
                    )
        if len(errors) > 0:
            raise ValidationError(errors, cls)  # type: ignore

        return values
{% endif -%}
{% if klass.name in one_of_many_fields %}
    @root_validator(pre=True, allow_reuse=True)
    def {{ 'validate_one_of_many'|unique_func_name(klass.name) }}(
        cls, values: typing.Dict[str, typing.Any]
    ) -> typing.Dict[str, typing.Any]:
        """https://www.hl7.org/fhir/formats.html#choice
        A few elements have a choice of more than one data type for their content.
        All such elements have a name that takes the form nnn[x].
        The "nnn" part of the name is constant, and the "[x]" is replaced with
        the title-cased name of the type that is actually used.
        The table view shows each of these names explicitly.

        Elements that have a choice of data type cannot repeat - they must have a
        maximum cardinality of 1. When constructing an instance of an element with a
        choice of types, the authoring system must create a single element with a
        data type chosen from among the list of permitted data types.
        """
        one_of_many_fields = {
	        {%- for prefix in one_of_many_fields[klass.name] %}
			"{{ prefix }}": [
				{%- for field in one_of_many_fields[klass.name][prefix] %}
			    "{{ field }}"{% if not loop.last -%},{% endif -%}
				{% endfor -%}
		    ]{% if not loop.last -%},{% endif -%}
	        {% endfor -%}
	    }
        for prefix, fields in one_of_many_fields.items():
            assert cls.__fields__[fields[0]].field_info.extra["one_of_many"] == prefix
            required = (
                cls.__fields__[fields[0]].field_info.extra["one_of_many_required"]
                is True
            )
            found = False
            for field in fields:
                if field in values and values[field] is not None:
                    if found is True:
                        raise ValueError(
                            "Any of one field value is expected from "
                            f"this list {fields}, but got multiple!"
                        )
                    else:
                        found = True
            if required is True and found is False:
                raise ValueError(f"Expect any of field value from this list {fields}.")

        return values
{% endif -%}
{%- endfor %}
